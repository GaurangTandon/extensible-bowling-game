@startuml

title __CODE's Class Diagram__\n

  namespace BowlingGame {
    class ControlDesk.AddPartyView {
        {static} - BTN_ADD_PATRON : String
        {static} - BTN_FINISHED : String
        {static} - BTN_NEW_PATRON : String
        {static} - BTN_REM_PATRON : String
        {static} - ERR_MEMBER_EXISTS : String
        - bowlerDB : ArrayList<Object>
        - bowlerPanel : ScrollablePanel<Object>
        - maxSize : int
        - party : ArrayList<String>
        - partyPanel : ScrollablePanel<String>
        - selectedMember : String
        - selectedNick : String
        + actionPerformed()
        + getParty()
        + valueChanged()
        ~ ControlDesk.AddPartyView()
        ~ updateNewPatron()
        - addPatron()
        - buildBowlerPanel()
        - onPartyFinished()
        - removePatron()
    }
  }
  

  namespace BowlingGame {
    class ControlDesk.AdhocView {
        {static} - BTN_BEST : String
        {static} - BTN_FINISHED : String
        {static} - BTN_HIGHEST : String
        {static} - BTN_LOWEST : String
        + actionPerformed()
        ~ ControlDesk.AdhocView()
        - displayBestPlayer()
        - displayHighest()
        - displayLowest()
        - setDisplayLabel()
    }
  }
  

  namespace BowlingGame {
    class Alley {
        ~ Alley()
    }
  }
  

  namespace BowlingGame {
    class Bowlers.Bowler {
        - email : String
        - fullName : String
        - nickName : String
        ~ Bowlers.Bowler()
        ~ getEmail()
        ~ getFullName()
        ~ getNickName()
        ~ log()
    }
  }
  

  namespace BowlingGame {
    class Utilities.BowlerFile {
        {static} - BOWLER_DAT : String
        {static} ~ getBowlerInfo()
        {static} ~ getBowlers()
        {static} ~ putBowlerIfDidntExist()
        - Utilities.BowlerFile()
        {static} - putBowlerInfo()
    }
  }
  

  namespace BowlingGame {
    class Bowlers.BowlerScoreView {
        - panel : Component
        ~ Bowlers.BowlerScoreView()
        ~ getPanel()
        ~ update()
        {static} - getCharToShow()
        - setBoxLabels()
        - setScoreLabels()
    }
  }
  

  namespace BowlingGame {
    class Bowlers.BowlerScorerTest {
        {static} - bs : Bowlers.ScorableBowler
        {static} + main()
        - Bowlers.BowlerScorerTest()
        {static} - asserter()
        {static} - checkEquality()
        {static} - rollMany()
        {static} - rollSpare()
        {static} - testAllOnes()
        {static} - testBest()
        {static} - testGutters()
        {static} - testSpares()
    }
  }
  

  namespace BowlingGame {
    class BowlingAlleyDriver {
        {static} + main()
        - BowlingAlleyDriver()
    }
  }
  

  namespace BowlingGame {
    class ControlDesk.ControlDesk {
        ~ numLanes : int
        - lanes : List<Lane.Lane>
        - partyQueue : LinkedList<Bowlers.ScorableParty>
        + run()
        ~ ControlDesk.ControlDesk()
        ~ addPartyToQueue()
        ~ assignLane()
        ~ createEvent()
        ~ getLanes()
    }
  }
  

  namespace BowlingGame {
    class Observer.ControlDeskEvent {
        - partyQueue : ArrayList<String>
        ~ Observer.ControlDeskEvent()
        ~ getPartyQueue()
    }
  }
  

  namespace BowlingGame {
    class ControlDesk.ControlDeskView {
        {static} - BTN_ADD_PARTY : String
        {static} - BTN_ASSIGN : String
        {static} - BTN_FINISHED : String
        {static} - BTN_QUERIES : String
        - maxMembers : int
        - partyPanel : ScrollablePanel<Object>
        + actionPerformed()
        + receiveEvent()
        ~ ControlDesk.ControlDeskView()
        ~ updateAddParty()
        - setupLaneStatusPanel()
    }
  }
  

  namespace BowlingGame {
    class Endgame.EndGamePrompt {
        {static} - BTN_NO : String
        {static} - BTN_YES : String
        - result : int
        + actionPerformed()
        ~ Endgame.EndGamePrompt()
        ~ destroy()
        ~ getResult()
    }
  }
  

  namespace BowlingGame {
    class Endgame.EndGameReport {
        {static} - BTN_FINISHED : String
        {static} - BTN_PRINT : String
        - result : int
        - retVal : List<String>
        - selectedMember : String
        + actionPerformed()
        + valueChanged()
        ~ Endgame.EndGameReport()
        ~ shouldPrint()
    }
  }
  

  namespace BowlingGame {
    interface Observer.Event {
    }
  }
  

  namespace BowlingGame {
    class Bowlers.Frame {
        {static} ~ SPARE : int
        {static} ~ STRIKE : int
        {static} ~ UNROLLED : int
        ~ frameNumber : int
        ~ rollCount : int
        ~ rolls : int[]
        ~ Bowlers.Frame()
        ~ Bowlers.Frame()
        ~ addRolls()
        ~ canRollAgain()
        ~ getContributionToScore()
        ~ getDisplayValue()
        ~ getIncrement()
        ~ isSpare()
        ~ roll()
        {static} ~ sumRolls()
        - isStrike()
        - reset()
    }
  }
  

  namespace BowlingGame {
    class Lane.Lane {
        - paused : boolean
        + pauseGame()
        + receiveEvent()
        + run()
        ~ Lane.Lane()
        ~ assignParty()
        ~ createEvent()
        ~ isPartyAssigned()
        ~ loadState()
        ~ saveState()
        ~ setPauseState()
        ~ subscribePinsetter()
        ~ unPauseGame()
        - bowlOneBowlerOneFrame()
        - exitGame()
        - getPinsDown()
        - onGameFinish()
        - waitWhilePaused()
    }
  }
  

  namespace BowlingGame {
    class Observer.LaneEvent {
        - bowlerNick : String
        - bowlerNicks : ArrayList<String>
        - cumulativeScore : int[][]
        - mechanicalProblemExists : boolean
        - partySize : int
        - score : int[][]
        - totalPinsDown : int
        ~ Observer.LaneEvent()
        ~ getBowlerNick()
        ~ getBowlerNicks()
        ~ getCumulativeScore()
        ~ getPartySize()
        ~ getScore()
        ~ getTotalPinsDown()
        ~ isMechanicalProblem()
        ~ isPartyEmpty()
    }
  }
  

  namespace BowlingGame {
    interface LaneInterface {
        {abstract} + pauseGame()
    }
  }
  

  namespace BowlingGame {
    class Lane.LaneStatusView {
        {static} - BTN_MAINTENANCE : String
        {static} - BTN_PAUSE : String
        {static} - BTN_RESUME : String
        {static} - BTN_VIEW_LANE : String
        {static} - BTN_VIEW_PINSETTER : String
        - currentBowler : JLabel
        - laneShowing : boolean
        - pinsDown : JLabel
        - psShowing : boolean
        - saveFile : String
        + actionPerformed()
        + receiveEvent()
        ~ Lane.LaneStatusView()
        ~ showLane()
        - loadState()
        - saveState()
    }
  }
  

  namespace BowlingGame {
    class Lane.LaneView {
        {static} - BTN_MAINTENANCE : String
        - bowlerNicks : List<String>
        - bsv : List<Bowlers.BowlerScoreView>
        - frame : JFrame
        + actionPerformed()
        + receiveEvent()
        ~ Lane.LaneView()
        ~ setVisible()
        - getButtonPanel()
        - makeFrame()
        - setupLaneGraphics()
    }
  }
  

  namespace BowlingGame {
    class Bowlers.LastFrame {
        ~ Bowlers.LastFrame()
        ~ canRollAgain()
        ~ getContributionToScore()
        ~ getDisplayValue()
        ~ getIncrement()
    }
  }
  

  namespace BowlingGame {
    class ControlDesk.NewPatronView {
        {static} - BTN_ABORT : String
        {static} - BTN_FINISHED : String
        {static} - TXT_EMAIL_FIELD : String
        {static} - TXT_FULL_FIELD : String
        {static} - TXT_NICK_FIELD : String
        - email : String
        - full : String
        - nick : String
        + actionPerformed()
        ~ ControlDesk.NewPatronView()
        ~ getEmail()
        ~ getFull()
        ~ getNickName()
    }
  }
  

  namespace BowlingGame {
    interface Observer.Observer {
        {abstract} + receiveEvent()
    }
  }
  

  namespace BowlingGame {
    class Bowlers.Party {
        ~ bowlers : Vector<Bowlers.ScorableBowler>
        ~ name : String
        ~ Bowlers.Party()
        ~ getMemberNicks()
        ~ getMembers()
        ~ getName()
        ~ getPartySize()
        ~ loadState()
        ~ saveState()
    }
  }
  

  namespace BowlingGame {
    class Pinsetter.PinSetterView {
        - frame : JFrame
        - pinVector : Vector<JLabel>
        - secondRoll : JPanel
        + receiveEvent()
        ~ Pinsetter.PinSetterView()
        ~ setVisible()
        - addDummyPanels()
        - addPins()
        - displayKnockedDownPins()
        - getPanels()
        - makeFirstRow()
        - makeFourthRow()
        - makeSecondRow()
        - makeThirdRow()
        - resetColors()
    }
  }
  

  namespace BowlingGame {
    class Pinsetter.Pinsetter {
        {static} ~ PIN_COUNT : int
        - foul : boolean
        - isPinStanding : boolean[]
        - pinsDownedOnThisThrow : int
        - rnd : Random
        - throwNumber : int
        ~ Pinsetter.Pinsetter()
        ~ ballThrown()
        ~ createEvent()
        ~ resetState()
        ~ totalPinsDown()
        - resetPins()
    }
  }
  

  namespace BowlingGame {
    class Observer.PinsetterEvent {
        - foulCommitted : boolean
        - isReset : boolean
        - pinsDownThisThrow : int
        - pinsStillStanding : boolean[]
        - throwNumber : int
        ~ Observer.PinsetterEvent()
        ~ isFirstThrow()
        ~ isFoulCommitted()
        ~ isPinKnockedDown()
        ~ isReset()
        ~ pinsDownOnThisThrow()
    }
  }
  

  namespace BowlingGame {
    class Utilities.PrintableText {
        - POINTS_PER_INCH : int
        - text : String
        + print()
        ~ Utilities.PrintableText()
    }
  }
  

  namespace BowlingGame {
    abstract class Observer.Publisher {
        - subscribers : List<Observer.Observer>
        ~ Observer.Publisher()
        {abstract} ~ createEvent()
        ~ publish()
        ~ subscribe()
    }
  }
  

  namespace BowlingGame {
    class Bowlers.ScorableBowler {
        {static} - DELIMITER : String
        - cumulativeScore : int[]
        - currFrame : int
        - frames : Bowlers.Frame[]
        - perFramePartRes : int[]
        - score : int
        ~ Bowlers.ScorableBowler()
        ~ Bowlers.ScorableBowler()
        ~ Bowlers.ScorableBowler()
        ~ canRollAgain()
        ~ getByFramePartResult()
        ~ getCumulativeScore()
        ~ getCurrFrame()
        ~ getScore()
        ~ loadState()
        ~ reset()
        ~ roll()
        ~ saveState()
        ~ updateCumulativeScores()
        - getRolls()
        - resetCumulativeScores()
    }
  }
  

  namespace BowlingGame {
    class Bowlers.ScorableParty {
        {static} ~ FRAME_COUNT : int
        {static} ~ LAST_FRAME : int
        {static} ~ MAX_ROLLS : int
        {static} - DELIMITER : String
        {static} - MAX_GAMES : int
        - bowlerIndex : int
        - finalScores : int[][]
        - finished : boolean
        - frameNumber : int
        - gameNumber : int
        - halted : boolean
        ~ addBowler()
        ~ canRollAgain()
        ~ getByBowlerByFramePartResult()
        ~ getCumulativeScores()
        ~ getCurrentThrowerNick()
        ~ getFinalScores()
        ~ getGameNumber()
        ~ isFinished()
        ~ isHalted()
        ~ loadState()
        ~ nextBowler()
        ~ onGameFinish()
        ~ pause()
        ~ resetScoresHard()
        ~ roll()
        ~ saveState()
        ~ setFinalScoresOnGameEnd()
        ~ unpause()
        - getBowlersFinalScoreForCurrentGame()
        - isLastFrame()
        - resetScores()
        - resetScores()
    }
  }
  

  namespace BowlingGame {
    class Utilities.Score {
        - date : String
        - nickname : String
        - score : Integer
        + toString()
        ~ Utilities.Score()
        ~ Utilities.Score()
        ~ getDate()
        ~ getNick()
        ~ getScore()
    }
  }
  

  namespace BowlingGame {
    class Utilities.ScoreHistoryFile {
        {static} - SCORE_HISTORY_DAT : String
        {static} ~ addScore()
        {static} ~ generateScoreHistoryString()
        {static} ~ getBestScore()
        {static} ~ getLeastScore()
        {static} ~ getMaxCumulativeScore()
        {static} ~ getScores()
        - Utilities.ScoreHistoryFile()
    }
  }
  

  namespace BowlingGame {
    class Utilities.ScoreReport {
        - content : String
        ~ Utilities.ScoreReport()
        ~ sendPrintout()
        - sendEmail()
        - sendLn()
        - sendLn()
    }
  }
  

  namespace BowlingGame {
    class Utilities.Util {
        {static} ~ busyWait()
        {static} ~ containsString()
        {static} ~ getDateString()
        {static} ~ getPatronDetails()
        - Utilities.Util()
    }
  }
  

  ControlDesk.AddPartyView .up.|> java.awt.event.ActionListener
  ControlDesk.AddPartyView .up.|> javax.swing.event.ListSelectionListener
  ControlDesk.AddPartyView o-- Widget.ButtonPanel : buttonPanel
  ControlDesk.AddPartyView o-- ControlDesk.ControlDeskView : controlDesk
  ControlDesk.AddPartyView o-- Widget.WindowFrame : win
  ControlDesk.AdhocView .up.|> java.awt.event.ActionListener
  ControlDesk.AdhocView o-- Widget.ButtonPanel : buttonPanel
  ControlDesk.AdhocView o-- Utilities.Score : currScore
  ControlDesk.AdhocView o-- Widget.ContainerPanel : statDisplay
  ControlDesk.AdhocView o-- Widget.WindowFrame : win
  Bowlers.BowlerScoreView o-- Widget.GridPanel : gridPanel
  ControlDesk.ControlDesk .up.|> java.lang.Runnable
  ControlDesk.ControlDesk -up-|> Observer.Publisher
  Observer.ControlDeskEvent .up.|> Observer.Event
  ControlDesk.ControlDeskView .up.|> Observer.Observer
  ControlDesk.ControlDeskView .up.|> java.awt.event.ActionListener
  ControlDesk.ControlDeskView o-- ControlDesk.ControlDesk : controlDesk
  ControlDesk.ControlDeskView o-- Widget.ButtonPanel : controlsPanel
  ControlDesk.ControlDeskView o-- Widget.WindowFrame : win
  Endgame.EndGamePrompt .up.|> java.awt.event.ActionListener
  Endgame.EndGamePrompt o-- Widget.ButtonPanel : buttonPanel
  Endgame.EndGamePrompt o-- Widget.WindowFrame : win
  Endgame.EndGameReport .up.|> java.awt.event.ActionListener
  Endgame.EndGameReport .up.|> javax.swing.event.ListSelectionListener
  Endgame.EndGameReport o-- Widget.ButtonPanel : buttonPanel
  Endgame.EndGameReport o-- Widget.WindowFrame : win
  Lane.Lane .up.|> LaneInterface
  Lane.Lane .up.|> Observer.Observer
  Lane.Lane .up.|> java.lang.Runnable
  Lane.Lane -up-|> Observer.Publisher
  Lane.Lane o-- Pinsetter.Pinsetter : pinsetter
  Lane.Lane o-- Bowlers.ScorableParty : scorer
  Observer.LaneEvent .up.|> Observer.Event
  Lane.LaneStatusView .up.|> Observer.Observer
  Lane.LaneStatusView .up.|> java.awt.event.ActionListener
  Lane.LaneStatusView o-- Widget.ButtonPanel : buttonPanel
  Lane.LaneStatusView o-- Widget.ContainerPanel : gamePanel
  Lane.LaneStatusView o-- Lane.Lane : lane
  Lane.LaneStatusView o-- Lane.LaneView : laneView
  Lane.LaneStatusView o-- Pinsetter.PinSetterView : pinSetterView
  Lane.LaneView .up.|> Observer.Observer
  Lane.LaneView .up.|> java.awt.event.ActionListener
  Lane.LaneView o-- Widget.ButtonPanel : buttonPanel
  Lane.LaneView o-- Widget.ContainerPanel : containerPanel
  Lane.LaneView o-- LaneInterface : lane
  Bowlers.LastFrame -up-|> Bowlers.Frame
  ControlDesk.NewPatronView .up.|> java.awt.event.ActionListener
  ControlDesk.NewPatronView o-- ControlDesk.AddPartyView : addParty
  ControlDesk.NewPatronView o-- Widget.ButtonPanel : buttonPanel
  ControlDesk.NewPatronView o-- Widget.TextFieldPanel : patronPanel
  ControlDesk.NewPatronView o-- Widget.WindowFrame : window
  Pinsetter.PinSetterView .up.|> Observer.Observer
  Pinsetter.Pinsetter -up-|> Observer.Publisher
  Observer.PinsetterEvent .up.|> Observer.Event
  Utilities.PrintableText .up.|> java.awt.print.Printable
  Bowlers.ScorableBowler -up-|> Bowlers.Bowler
  Bowlers.ScorableParty -up-|> Bowlers.Party


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
